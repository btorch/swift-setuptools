#!/usr/bin/env python

import sys
import os
import tempfile
import shutil
import swiftst.consts as sc
import swiftst.common.config as config
import swiftst.common.utils as utils
from swiftst.exceptions import TemplateFileError, ResponseError
from optparse import OptionParser
from fabric.api import *
from string import Template


def template_changes(tdir, templates, conf):
    if os.path.isdir(tdir):
        for template in templates.keys():
            subs = {}
            tfile = tdir + '/' + template
            for val in templates[template]:
                subs[val] = conf[val.lower()]

            try:
                fdr = open(tfile, 'r')
                body = fdr.read()
                fdr.close()
            except Exception as e:
                status = 500
                msg = '%s (file: %s)' % (e.args[1], tfile)
                raise TemplateFileError(status, msg)

            s = Template(body)
            new_body = s.safe_substitute(subs)

            try:
                fdw = open(tfile, 'w')
                fdw.write(new_body)
                fdw.close()
            except Exception as e:
                status = 500
                msg = '%s (file: %s)' % (e.args[1], tfile)
                raise TemplateFileError(status, msg)

        return True

    else:
        return False


def main():
    '''
    Main function
    '''
    parser = OptionParser(add_help_option=False)
    parser.add_option("-h", "--help", action="help")
    parser.add_option("-c", "--conf",
        action="store", type="string",
        default="/etc/swift-setuptools/swift-setuptools.conf",
        dest="config",
        help='''
             Path to config file (default:
             /etc/swift-setuptools/swift-setuptools.conf)
             '''
    )
    (options, args) = parser.parse_args()
    conf = config.parse_config([options.config, ])

    account = conf['account_number']
    account_nick = conf['account_nick']
    tmpl_dir = conf['template_dir']
    generated_configs = conf['genconfigs']
    name = "swift-acct" + account + "-" + account_nick
    dest_dir = generated_configs + '/' + name
    temp_dir = tempfile.mkdtemp()

    pkgs = ['rsync', 'git', 'git-core']
    if not utils.check_installed(pkgs):
        status = 500
        msg = 'Error on checking installed packages'
        raise ResponseError(status, msg)

    try:
        os.mkdir(dest_dir)
    except Exception as e:
        (status, msg) = e.args
        raise ResponseError(status, msg)

    with settings(hide('running', 'stdout', 'stderr'), warn_only=True):
        c = local('''
                  rsync -aq0c --exclude=".ignore" --exclude=".git" %s/ %s/
                  ''' % (tmpl_dir, temp_dir), capture=True)
        if c.succeeded:
            if template_changes(temp_dir, sc.templates, conf):
                dirs = os.listdir(temp_dir)
                dirs.remove('common')
                for i in dirs:
                    src = temp_dir + '/' + i
                    dst = dest_dir + '/' + i
                    os.mkdir(dst)
                    local('rsync -aq0c %s/common/ %s/' % (temp_dir, dst))
                    local('rsync -aq0c %s/ %s/' % (src, dst))

    shutil.rmtree(temp_dir)
    return 0


if __name__ == '__main__':
    status = main()
    disconnect_all()
    sys.exit(status)
