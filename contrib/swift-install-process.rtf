{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
\margl1440\margr1440\vieww15200\viewh13500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 --------------------\
PRE-SETUP\
--------------------
\b0 \
\pard\pardeftab720\ql\qnatural

\b \cf2 \
- Udev Rules Information:
\b0 \

\b \
\pard\tx380\pardeftab720\ql\qnatural
\cf2 1) Find out what is your first jbod device block unit \

\b0 This is an example on a system with H800 external attached to a 45 drive Jbod unit where sdc is the first block unit\
\

\i\b # udevadm info --query path -n /dev/sdc
\b0 \
\pard\pardeftab720\ql\qnatural

\i0 \cf2 /devices/pci0000:20/0000:20:03.0/0000:
\b 22:00.0
\b0 /host1/target1:2:0/1:2:0:0/block/sdc\
\

\i\b # lspci -vv |grep "22:00.0"
\i0\b0 \
22:00.0 RAID bus controller: LSI Logic / Symbios Logic MegaRAID SAS 2108 [Liberator] (rev 05)\
\

\i\b # udevadm info -a -p \'a0$(udevadm info -q path -n /dev/sdc) | less
\i0\b0 \
Udevadm info starts with the device specified by the devpath and then\
walks up the chain of parent devices. It prints for every device\
found, all possible attributes in the udev rules key format.\
A rule to match, can be composed by the attributes of the device\
and the attributes from one single parent device.\
\
\'a0\'a0looking at device '/devices/pci0000:20/0000:20:03.0/0000:22:00.0/host1/target1:2:0/1:2:0:0/block/sdc':\
\'a0\'a0 \'a0KERNEL=="sdc"\
\'a0\'a0 \'a0SUBSYSTEM=="block"\
\'a0\'a0 \'a0DRIVER==""\
\'a0\'a0 \'a0ATTR\{range\}=="16"\
\'a0\'a0 \'a0ATTR\{ext_range\}=="256"\
\'a0\'a0 \'a0ATTR\{removable\}=="0"\
\'a0\'a0 \'a0ATTR\{ro\}=="0"\
\'a0\'a0 \'a0ATTR\{size\}=="5859442688"\
\'a0\'a0 \'a0ATTR\{alignment_offset\}=="0"\
\'a0\'a0 \'a0ATTR\{discard_alignment\}=="0"\
\'a0\'a0 \'a0ATTR\{capability\}=="50"\
\'a0\'a0 \'a0ATTR\{stat\}==" 4257578 \'a0 \'a0 1801 609826481 21443312 13463198 \'a01075455 490650399 110490812 \'a0 \'a0 \'a0 \'a00 22480736 131892360"\
\'a0\'a0 \'a0ATTR\{inflight\}==" \'a0 \'a0 \'a0 0 \'a0 \'a0 \'a0 \'a00"\
\'a0\'a0 \'a0ATTR\{events\}==""\
\'a0\'a0 \'a0ATTR\{events_async\}==""\
\'a0\'a0 \'a0ATTR\{events_poll_msecs\}=="-1"\
\
\'a0\'a0looking at parent device '/devices/pci0000:20/0000:20:03.0/0000:22:00.0/host1/target1:2:0/1:2:0:0':\
\'a0\'a0 \'a0KERNELS=="1:2:0:0"\
\'a0\'a0 \'a0SUBSYSTEMS=="scsi"\
\'a0\'a0 \'a0DRIVERS=="sd"\
\'a0\'a0 \'a0ATTRS\{device_blocked\}=="0"\
\'a0\'a0 \'a0ATTRS\{type\}=="0"\
\'a0\'a0 \'a0ATTRS\{scsi_level\}=="6"\
\'a0\'a0 \'a0ATTRS\{vendor\}=="DELL \'a0 \'a0"\
\'a0\'a0 \'a0ATTRS\{model\}=="PERC H800 \'a0 \'a0 \'a0 "\
\'a0\'a0 \'a0ATTRS\{rev\}=="2.10"\
\'a0\'a0 \'a0ATTRS\{state\}=="running"\
\'a0\'a0 \'a0ATTRS\{timeout\}=="90"\
\'a0\'a0 \'a0ATTRS\{iocounterbits\}=="32"\
\'a0\'a0 \'a0ATTRS\{iorequest_cnt\}=="0x10e67b0"\
\'a0\'a0 \'a0ATTRS\{iodone_cnt\}=="0x10e67b0"\
\'a0\'a0 \'a0ATTRS\{ioerr_cnt\}=="0x6"\
\'a0\'a0 \'a0ATTRS\{evt_media_change\}=="0"\
\'a0\'a0 \'a0ATTRS\{dh_state\}=="detached"\
\'a0\'a0 \'a0ATTRS\{queue_depth\}=="256"\
\'a0\'a0 \'a0ATTRS\{queue_ramp_up_period\}=="120000"\
\'a0\'a0 \'a0ATTRS\{queue_type\}=="none"\
\
\

\i\b 2) Create /etc/udev/rules.d/10_swift.rules using the information gathered above for the device and parent
\b0 \

\i0 \
############## HOST1 #################\
### Slot: \'a0 22:00.0\
### Class: \'a0RAID bus controller\
### Vendor: LSI Logic / Symbios Logic\
### Device: LSI MegaSAS 9260\
### SVendor: \'a0 \'a0 \'a0 \'a0Dell\
### SDevice: \'a0 \'a0 \'a0 \'a0Device 1f15\
### Rev: \'a0 \'a005\
### Driver: megaraid_sas\
### Module: megaraid_sas\
###\
### Some helpful commands\'a0\
### udevadm info --query=all --attribute-walk --path=$(udevadm info --query=path \'a0-n /dev/sdX)\
### modinfo \'a0/lib/modules/2.6.32-34-server/kernel/drivers/scsi/megaraid/megaraid_sas.ko\'a0\
###\
### Rules for controller H800 (Controller #0 - host1 - Physical Slot 6)\
KERNELS=="1:2:0:0", ATTRS\{model\}=="PERC H800", KERNEL=="sd*", \'a0 \'a0SYMLINK+="c1u0p%n"\
KERNELS=="1:2:1:0", ATTRS\{model\}=="PERC H800", KERNEL=="sd*", \'a0 \'a0SYMLINK+="c1u1p%n"\
KERNELS=="1:2:2:0", ATTRS\{model\}=="PERC H800", KERNEL=="sd*", \'a0 \'a0SYMLINK+="c1u2p%n"\
....\
KERNELS=="1:2:44:0", ATTRS\{model\}=="PERC H800", KERNEL=="sd*", \'a0 \'a0SYMLINK+="c1u44p%n"\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf2 \

\i\b \cf0 3) Run "udevadm trigger" to create symlinks\
4) Verify they were created and reboot \
\
5) Drive setup:\

\b0 	You could use {\field{\*\fldinst{HYPERLINK "https://github.com/btorch/swift-setuptools/blob/master/contrib/setup_drives.sh"}}{\fldrslt https://github.com/btorch/swift-setuptools/blob/master/contrib/setup_drives.sh}}\
\

\b 6) Run bonnie++ on the drives to find out what breaks (may take a couple days)\

\i0\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 --------------------\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 SWIFT SETUP\
--------------------
\b0 \
\
1) Login to the admin box\
\pard\tx220\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 	- make sure your user has ssh-key access to all other nodes\
	- apt-get install git git-core -Vy\
	- git clone git@github.com:btorch/swift-setuptools.git \
\
2) Install the tools\
	- apt-get install python-setuptools -Vy\
	- cd swift-setuptools\
	- python setup.py  install --prefix=/usr/local\
\
3) Create a swift-setuptools.conf \
	- cd /etc/swift-setuptools\
	- cp swift-setuptools.conf-sample swift-setuptools.conf\
	- Modify the values of the config files to suit your environment needs\
\
4) Generate the configuration files \
	- run : swift-genconfigs -v  (-h/--help for info)\
	- If needed go to the "Generated Location" path and modify any configuration\
	  files before proceeding. \
	      Example: \
		- if you need to add more middlewares\
		- Or change some keystone setting on proxy-server.conf \
		- Or change something on another file like dispertion.conf\
		- Setup DSH groups \'85 etc \
\
*** Before proceeding make sure you have proper dsh groups setup\
      pointing to the proper boxes and a proper /etc/hosts file which should\
	   have been done during the pre setup anyway ***\
\
5) Setup the admin box \
	- run : swift-adminbox-setup -v (-h/--help for info)\
	- Just in case: stop/start exim4 and make sure it's listening \
	  Note: The above will create a git repo under /srv/git/swift-cluster-configs/ \
	             which all servers will pull their configs from. So any further config changes\
                 should happen in this repo.\
\
6) Deploy swift systems: (proxy, storage or saio)\
	- check on swift-node-setup --help\
	- Example: swift-node-setup -t storage -g storage\
\
7) Restart syslog-ng on all boxes\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0     \
	\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 -------------------------------\
SWIFT RING DEPLOY\
-------------------------------
\b0 \
\
1) Start up all the swift services on all the storage nodes \
\pard\tx200\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 	- swift-init all start  (ignore the ring complaints)\
\
2) Make sure that you can perform a recon request to all ports 600[0-2]\
	- curl -i http://IP_ADDR:6000/recon/unmounted\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
3) Create the rings (
\b folsom
\b0 , cd /srv/ring --- 
\b grizzly
\b0 ,  cd /etc/swift)\
\pard\tx200\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 	- Choose the proper <part> <replicas> <min_hour> for the cluster in question\
	- for i in account container object ; do swift-ring-builder  /etc/swift/$i.builder create <part> <reps> <mhour> ; done \
\

\b FOLSOM
\b0 :\

\i 	- You will be using the scripts found in the admin box under /srv/ring/scripts
\i0 \
	4) Start adding nodes to the rings \
		- Example: /srv/ring/scripts/ring_add.sh -i 172.16.0.7 -r object -z 1 -w 100 -c 0 -s 1 -e 6  (-h for help/info)\
\
	5) Once all is done rebalance all rings\
		swift-ring-builder account.builder rebalance \
		swift-ring-builder container.builder rebalance \
		swift-ring-builder object.builder rebalance \
\
	6) Run : /srv/ring/scripts/updatemd5.sh  to create the ring.md5sum file\
	7) Run: dsh -Mc -g GROUP '/usr/local/bin/retrievering.sh RINGSERVER_IP\
\

\b GRIZZLY:\

\i\b0 	- You will be using swiftscout and swift-ring-master
\i0 \
	4) Install the debian packages that can be found under 
\i swift-setuptools/contrib
\b \

\i0\b0 		- The swiftscout is installed only on the admin box\
		- The swift-ring-master is installed on the admin box and all nodes that require the swift rings\
\
	5) Start adding nodes to the rings using drivescout\
		- drivescout -v -y -w 100  --mount-prefix=/srv/node -r IP/IPRANGE -p PORT -z ZONE /etc/swift/BUILDER_FILE\
		- Read drivescout --help for more details\
		- Verify the rings and then rebalance: swift-ring-builder BUILDER_FILE rebalance\
\
	6) Start setting up
\i  swift-ring-master 
\i0 on the Admin box
\i \

\i0 	    - Copy config
\i\b \

\i0\b0 		- cp /usr/share/swift-ring-master/ring-master.conf-sample /etc/swift/ring-master.conf\
		- Make any changes to the configs that you may see fit\
	    - Copy init scripts\
		- cp /usr/share/swift-ring-master/swift-ring-master-init /etc/init.d/\
		- cp /usr/share/swift-ring-master/swift-ring-master-wsgi-init /etc/init.d/\
		- NOTE: services are not started up at boot time unless you enable it with update-rc.d\
	    - Start Services\
		- /etc/init.d/swift-ring-master-init start\
		- /etc/init.d/swift-ring-master-wsgi-init start\
		- chown -R swift.swift /etc/swift\
		- chown swift.swift /etc/swift/.lock\
	\
\
	7) Start setting up
\i  swift-ring-master
\i0  on all other systems that require the ring\
	    Assuming pkg is already installed on all other boxes\
	    - Copy config\
		- dsh -Mc -g GROUP 'cp /usr/share/swift-ring-master/ring-minion.conf-sample /etc/swift/ring-minion.conf'\
		- dsh -Mc -g GROUP 'sed -i "s;^#ring_master.*;ring_master = http://RINGSERVER_IP:8090/;" /etc/swift/ring-minion.conf '\
	    - Retrieve Ring\
		- dsh -Mc -g GROUP 'swift-ring-minion-server -f -o ; chown -R swift.swift /etc/swift'\
\
	8) Restart all swift services everywhere\
	\
}