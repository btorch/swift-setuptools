#!/usr/bin/expect -f

# Info:
#   Expect script to supply root/admin password for remote ssh server and execute commands.
#   This script needs two argument to connect to remote server:
#   - ipaddr = IP Addreess of remote UNIX server, no hostname
#   - password = Password of remote UNIX server, for root user.
#   For example:
#       ./setup_swiftops.exp 192.168.1.11 password
#
#
# This Expect script was generated by autoexpect on Wed May  1 19:35:58 2013
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
                sleep .1
                exp_send -s -- $arg
        }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

# display usage
if {$argc!=2} {
   send_user "usage: $argv0 ipaddr password\n"
   exit
}
# script must be run by root user
set whoami [exec id -u]
if {$whoami!=0} {
   send_user "You must be a root user to run this script\n"
   exit
}

# set Variables
set ipaddr [lrange $argv 0 0]
set password [lrange $argv 1 1]

set timeout -1
spawn scp /home/swiftops/.ssh/id_rsa.pub root@$ipaddr:/tmp/id_rsa.pub
match_max 100000
expect "*?assword:*"
send -- "$password\r"
send_user "\n\n"
spawn $env(SHELL)
match_max 100000
#send -- "ssh -o StrictHostKeyChecking=no root@$ipaddr"
spawn ssh -o StrictHostKeyChecking=no root@$ipaddr
expect "*?assword:*"
send -- "$password\r"
send -- "\r"
send -- "useradd -G sudo -s /bin/bash -c \"Openstack Swift OP User\" -m swiftops\r"
send -- "sed -i  \"s/^%sudo.*/%sudo ALL=NOPASSWD: ALL/\"  /etc/sudoers ; chmod 0440 /etc/sudoers\r"
send -- "mkdir /home/swiftops/.ssh\r"
send -- "touch /home/swiftops/.ssh/authorized_keys\r"
send -- "cat /tmp/id_rsa.pub >> /home/swiftops/.ssh/authorized_keys\r"
send -- "chmod 700 /home/swiftops/.ssh ; chmod 600 /home/swiftops/.ssh/authorized_keys\r"
send -- "chown -R swiftops.swiftops /home/swiftops/.ssh\r"
send -- "rm -f /tmp/id_rsa.pub\r"
send -- "exit\r"
send -- "\r"
expect eof

